{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"C:/Users/adriana/BSBCoinDapp/node_modules/@babel/runtime/helpers/asyncToGenerator\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.JsonRpcEngine = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\r\n * A JSON-RPC request and response processor.\r\n * Give it a stack of middleware, pass it requests, and get back responses.\r\n */\n\n\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n  constructor() {\n    super();\n    this._middleware = [];\n  }\n  /**\r\n   * Add a middleware function to the engine's middleware stack.\r\n   *\r\n   * @param middleware - The middleware function to add.\r\n   */\n\n\n  push(middleware) {\n    this._middleware.push(middleware);\n  }\n\n  handle(req, cb) {\n    if (cb && typeof cb !== 'function') {\n      throw new Error('\"callback\" must be a function if provided.');\n    }\n\n    if (Array.isArray(req)) {\n      if (cb) {\n        return this._handleBatch(req, cb);\n      }\n\n      return this._handleBatch(req);\n    }\n\n    if (cb) {\n      return this._handle(req, cb);\n    }\n\n    return this._promiseHandle(req);\n  }\n  /**\r\n   * Returns this engine as a middleware function that can be pushed to other\r\n   * engines.\r\n   *\r\n   * @returns This engine as a middleware function.\r\n   */\n\n\n  asMiddleware() {\n    var _this = this;\n\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (req, res, next, end) {\n        try {\n          const [middlewareError, isComplete, returnHandlers] = yield JsonRpcEngine._runAllMiddleware(req, res, _this._middleware);\n\n          if (isComplete) {\n            yield JsonRpcEngine._runReturnHandlers(returnHandlers);\n            return end(middlewareError);\n          }\n\n          return next( /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator(function* (handlerCallback) {\n              try {\n                yield JsonRpcEngine._runReturnHandlers(returnHandlers);\n              } catch (error) {\n                return handlerCallback(error);\n              }\n\n              return handlerCallback();\n            });\n\n            return function (_x5) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        } catch (error) {\n          return end(error);\n        }\n      });\n\n      return function (_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  _handleBatch(reqs, cb) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // The order here is important\n      try {\n        // 2. Wait for all requests to finish, or throw on some kind of fatal\n        // error\n        const responses = yield Promise.all( // 1. Begin executing each request in the order received\n        reqs.map(_this2._promiseHandle.bind(_this2))); // 3. Return batch response\n\n        if (cb) {\n          return cb(null, responses);\n        }\n\n        return responses;\n      } catch (error) {\n        if (cb) {\n          return cb(error);\n        }\n\n        throw error;\n      }\n    })();\n  }\n  /**\r\n   * A promise-wrapped _handle.\r\n   */\n\n\n  _promiseHandle(req) {\n    return new Promise(resolve => {\n      this._handle(req, (_err, res) => {\n        // There will always be a response, and it will always have any error\n        // that is caught and propagated.\n        resolve(res);\n      });\n    });\n  }\n  /**\r\n   * Ensures that the request object is valid, processes it, and passes any\r\n   * error and the response object to the given callback.\r\n   *\r\n   * Does not reject.\r\n   */\n\n\n  _handle(callerReq, cb) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== 'object') {\n        const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, {\n          request: callerReq\n        });\n        return cb(error, {\n          id: undefined,\n          jsonrpc: '2.0',\n          error\n        });\n      }\n\n      if (typeof callerReq.method !== 'string') {\n        const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, {\n          request: callerReq\n        });\n        return cb(error, {\n          id: callerReq.id,\n          jsonrpc: '2.0',\n          error\n        });\n      }\n\n      const req = Object.assign({}, callerReq);\n      const res = {\n        id: req.id,\n        jsonrpc: req.jsonrpc\n      };\n      let error = null;\n\n      try {\n        yield _this3._processRequest(req, res);\n      } catch (_error) {\n        // A request handler error, a re-thrown middleware error, or something\n        // unexpected.\n        error = _error;\n      }\n\n      if (error) {\n        // Ensure no result is present on an errored response\n        delete res.result;\n\n        if (!res.error) {\n          res.error = eth_rpc_errors_1.serializeError(error);\n        }\n      }\n\n      return cb(error, res);\n    })();\n  }\n  /**\r\n   * For the given request and response, runs all middleware and their return\r\n   * handlers, if any, and ensures that internal request processing semantics\r\n   * are satisfied.\r\n   */\n\n\n  _processRequest(req, res) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const [error, isComplete, returnHandlers] = yield JsonRpcEngine._runAllMiddleware(req, res, _this4._middleware); // Throw if \"end\" was not called, or if the response has neither a result\n      // nor an error.\n\n      JsonRpcEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n      // middleware processing.\n\n\n      yield JsonRpcEngine._runReturnHandlers(returnHandlers); // Now we re-throw the middleware processing error, if any, to catch it\n      // further up the call chain.\n\n      if (error) {\n        throw error;\n      }\n    })();\n  }\n  /**\r\n   * Serially executes the given stack of middleware.\r\n   *\r\n   * @returns An array of any error encountered during middleware execution,\r\n   * a boolean indicating whether the request was completed, and an array of\r\n   * middleware-defined return handlers.\r\n   */\n\n\n  static _runAllMiddleware(req, res, middlewareStack) {\n    return _asyncToGenerator(function* () {\n      const returnHandlers = [];\n      let error = null;\n      let isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n      for (const middleware of middlewareStack) {\n        [error, isComplete] = yield JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n        if (isComplete) {\n          break;\n        }\n      }\n\n      return [error, isComplete, returnHandlers.reverse()];\n    })();\n  }\n  /**\r\n   * Runs an individual middleware.\r\n   *\r\n   * @returns An array of any error encountered during middleware exection,\r\n   * and a boolean indicating whether the request should end.\r\n   */\n\n\n  static _runMiddleware(req, res, middleware, returnHandlers) {\n    return new Promise(resolve => {\n      const end = err => {\n        const error = err || res.error;\n\n        if (error) {\n          res.error = eth_rpc_errors_1.serializeError(error);\n        } // True indicates that the request should end\n\n\n        resolve([error, true]);\n      };\n\n      const next = returnHandler => {\n        if (res.error) {\n          end(res.error);\n        } else {\n          if (returnHandler) {\n            if (typeof returnHandler !== 'function') {\n              end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` + `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, {\n                request: req\n              }));\n            }\n\n            returnHandlers.push(returnHandler);\n          } // False indicates that the request should not end\n\n\n          resolve([null, false]);\n        }\n      };\n\n      try {\n        middleware(req, res, next, end);\n      } catch (error) {\n        end(error);\n      }\n    });\n  }\n  /**\r\n   * Serially executes array of return handlers. The request and response are\r\n   * assumed to be in their scope.\r\n   */\n\n\n  static _runReturnHandlers(handlers) {\n    return _asyncToGenerator(function* () {\n      for (const handler of handlers) {\n        yield new Promise((resolve, reject) => {\n          handler(err => err ? reject(err) : resolve());\n        });\n      }\n    })();\n  }\n  /**\r\n   * Throws an error if the response has neither a result nor an error, or if\r\n   * the \"isComplete\" flag is falsy.\r\n   */\n\n\n  static _checkForCompletion(req, res, isComplete) {\n    if (!('result' in res) && !('error' in res)) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n\n    if (!isComplete) {\n      throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, {\n        request: req\n      });\n    }\n  }\n\n}\n\nexports.JsonRpcEngine = JsonRpcEngine;\n\nfunction jsonify(request) {\n  return JSON.stringify(request, null, 2);\n} //# sourceMappingURL=data:application/json;base64,","map":{"version":3,"sources":["C:/Users/adriana/BSBCoinDapp/node_modules/json-rpc-engine/dist/JsonRpcEngine.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","JsonRpcEngine","safe_event_emitter_1","require","eth_rpc_errors_1","default","constructor","_middleware","push","middleware","handle","req","cb","Error","Array","isArray","_handleBatch","_handle","_promiseHandle","asMiddleware","res","next","end","middlewareError","isComplete","returnHandlers","_runAllMiddleware","_runReturnHandlers","handlerCallback","error","reqs","responses","Promise","all","map","bind","resolve","_err","callerReq","EthereumRpcError","errorCodes","rpc","invalidRequest","request","id","undefined","jsonrpc","method","assign","_processRequest","_error","result","serializeError","_checkForCompletion","middlewareStack","_runMiddleware","reverse","err","returnHandler","internal","jsonify","handlers","handler","reject","JSON","stringify"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.JsonRpcEngine = void 0;\r\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\r\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\r\n/**\r\n * A JSON-RPC request and response processor.\r\n * Give it a stack of middleware, pass it requests, and get back responses.\r\n */\r\nclass JsonRpcEngine extends safe_event_emitter_1.default {\r\n    constructor() {\r\n        super();\r\n        this._middleware = [];\r\n    }\r\n    /**\r\n     * Add a middleware function to the engine's middleware stack.\r\n     *\r\n     * @param middleware - The middleware function to add.\r\n     */\r\n    push(middleware) {\r\n        this._middleware.push(middleware);\r\n    }\r\n    handle(req, cb) {\r\n        if (cb && typeof cb !== 'function') {\r\n            throw new Error('\"callback\" must be a function if provided.');\r\n        }\r\n        if (Array.isArray(req)) {\r\n            if (cb) {\r\n                return this._handleBatch(req, cb);\r\n            }\r\n            return this._handleBatch(req);\r\n        }\r\n        if (cb) {\r\n            return this._handle(req, cb);\r\n        }\r\n        return this._promiseHandle(req);\r\n    }\r\n    /**\r\n     * Returns this engine as a middleware function that can be pushed to other\r\n     * engines.\r\n     *\r\n     * @returns This engine as a middleware function.\r\n     */\r\n    asMiddleware() {\r\n        return async (req, res, next, end) => {\r\n            try {\r\n                const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\r\n                if (isComplete) {\r\n                    await JsonRpcEngine._runReturnHandlers(returnHandlers);\r\n                    return end(middlewareError);\r\n                }\r\n                return next(async (handlerCallback) => {\r\n                    try {\r\n                        await JsonRpcEngine._runReturnHandlers(returnHandlers);\r\n                    }\r\n                    catch (error) {\r\n                        return handlerCallback(error);\r\n                    }\r\n                    return handlerCallback();\r\n                });\r\n            }\r\n            catch (error) {\r\n                return end(error);\r\n            }\r\n        };\r\n    }\r\n    async _handleBatch(reqs, cb) {\r\n        // The order here is important\r\n        try {\r\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\r\n            // error\r\n            const responses = await Promise.all(\r\n            // 1. Begin executing each request in the order received\r\n            reqs.map(this._promiseHandle.bind(this)));\r\n            // 3. Return batch response\r\n            if (cb) {\r\n                return cb(null, responses);\r\n            }\r\n            return responses;\r\n        }\r\n        catch (error) {\r\n            if (cb) {\r\n                return cb(error);\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * A promise-wrapped _handle.\r\n     */\r\n    _promiseHandle(req) {\r\n        return new Promise((resolve) => {\r\n            this._handle(req, (_err, res) => {\r\n                // There will always be a response, and it will always have any error\r\n                // that is caught and propagated.\r\n                resolve(res);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Ensures that the request object is valid, processes it, and passes any\r\n     * error and the response object to the given callback.\r\n     *\r\n     * Does not reject.\r\n     */\r\n    async _handle(callerReq, cb) {\r\n        if (!callerReq ||\r\n            Array.isArray(callerReq) ||\r\n            typeof callerReq !== 'object') {\r\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\r\n            return cb(error, { id: undefined, jsonrpc: '2.0', error });\r\n        }\r\n        if (typeof callerReq.method !== 'string') {\r\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\r\n            return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });\r\n        }\r\n        const req = Object.assign({}, callerReq);\r\n        const res = {\r\n            id: req.id,\r\n            jsonrpc: req.jsonrpc,\r\n        };\r\n        let error = null;\r\n        try {\r\n            await this._processRequest(req, res);\r\n        }\r\n        catch (_error) {\r\n            // A request handler error, a re-thrown middleware error, or something\r\n            // unexpected.\r\n            error = _error;\r\n        }\r\n        if (error) {\r\n            // Ensure no result is present on an errored response\r\n            delete res.result;\r\n            if (!res.error) {\r\n                res.error = eth_rpc_errors_1.serializeError(error);\r\n            }\r\n        }\r\n        return cb(error, res);\r\n    }\r\n    /**\r\n     * For the given request and response, runs all middleware and their return\r\n     * handlers, if any, and ensures that internal request processing semantics\r\n     * are satisfied.\r\n     */\r\n    async _processRequest(req, res) {\r\n        const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\r\n        // Throw if \"end\" was not called, or if the response has neither a result\r\n        // nor an error.\r\n        JsonRpcEngine._checkForCompletion(req, res, isComplete);\r\n        // The return handlers should run even if an error was encountered during\r\n        // middleware processing.\r\n        await JsonRpcEngine._runReturnHandlers(returnHandlers);\r\n        // Now we re-throw the middleware processing error, if any, to catch it\r\n        // further up the call chain.\r\n        if (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Serially executes the given stack of middleware.\r\n     *\r\n     * @returns An array of any error encountered during middleware execution,\r\n     * a boolean indicating whether the request was completed, and an array of\r\n     * middleware-defined return handlers.\r\n     */\r\n    static async _runAllMiddleware(req, res, middlewareStack) {\r\n        const returnHandlers = [];\r\n        let error = null;\r\n        let isComplete = false;\r\n        // Go down stack of middleware, call and collect optional returnHandlers\r\n        for (const middleware of middlewareStack) {\r\n            [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\r\n            if (isComplete) {\r\n                break;\r\n            }\r\n        }\r\n        return [error, isComplete, returnHandlers.reverse()];\r\n    }\r\n    /**\r\n     * Runs an individual middleware.\r\n     *\r\n     * @returns An array of any error encountered during middleware exection,\r\n     * and a boolean indicating whether the request should end.\r\n     */\r\n    static _runMiddleware(req, res, middleware, returnHandlers) {\r\n        return new Promise((resolve) => {\r\n            const end = (err) => {\r\n                const error = err || res.error;\r\n                if (error) {\r\n                    res.error = eth_rpc_errors_1.serializeError(error);\r\n                }\r\n                // True indicates that the request should end\r\n                resolve([error, true]);\r\n            };\r\n            const next = (returnHandler) => {\r\n                if (res.error) {\r\n                    end(res.error);\r\n                }\r\n                else {\r\n                    if (returnHandler) {\r\n                        if (typeof returnHandler !== 'function') {\r\n                            end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\r\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, { request: req }));\r\n                        }\r\n                        returnHandlers.push(returnHandler);\r\n                    }\r\n                    // False indicates that the request should not end\r\n                    resolve([null, false]);\r\n                }\r\n            };\r\n            try {\r\n                middleware(req, res, next, end);\r\n            }\r\n            catch (error) {\r\n                end(error);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Serially executes array of return handlers. The request and response are\r\n     * assumed to be in their scope.\r\n     */\r\n    static async _runReturnHandlers(handlers) {\r\n        for (const handler of handlers) {\r\n            await new Promise((resolve, reject) => {\r\n                handler((err) => (err ? reject(err) : resolve()));\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Throws an error if the response has neither a result nor an error, or if\r\n     * the \"isComplete\" flag is falsy.\r\n     */\r\n    static _checkForCompletion(req, res, isComplete) {\r\n        if (!('result' in res) && !('error' in res)) {\r\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, { request: req });\r\n        }\r\n        if (!isComplete) {\r\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, { request: req });\r\n        }\r\n    }\r\n}\r\nexports.JsonRpcEngine = JsonRpcEngine;\r\nfunction jsonify(request) {\r\n    return JSON.stringify(request, null, 2);\r\n}\r\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}